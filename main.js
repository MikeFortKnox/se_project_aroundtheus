!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:r}=e;this._name=n,this._link=r,this._cardSelector=t,this._handlePreviewPicture=s}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImage.addEventListener("click",(()=>this._handlePreviewPicture({name:this._name,link:this._link})))}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}getView(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardName=this._cardElement.querySelector(".card__text"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName.textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formEl=t,this._form=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_setEventListeners(){this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this.disableButton()}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{console.log(e.target),(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}class n extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupElement.querySelector("modal__button-save"),this._inputList=[...this._popupForm.querySelectorAll("modal__input")]}_getInputValues(e){const t=new FormData(e),s=Object.fromEntries(t.entries());return this._formValues=s,this._formValues}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues(e.target);this._handleFormSubmit(t),this.reset()}))}reset(){this._popupForm.reset(),super.close()}}const r=document.querySelector("#edit-modal"),i=document.querySelector("#profile-edit-button"),o=document.querySelector("#add-card-modal"),a=(document.querySelector(".profile__title"),document.querySelector(".profile__description"),r.querySelector("#profile-title-input")),l=r.querySelector("#profile-description-input"),c=r.querySelector(".modal__form"),d=o.querySelector(".modal__form"),u=document.querySelector(".profile__add-button"),_={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button-save",inactiveButtonClass:"modal__button-save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},m=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._cardImage=this._popupElement.querySelector(".modal__preview-image"),this._cardTitle=this._popupElement.querySelector(".modal__preview-description")}open(e){let{name:t,link:s}=e;this._cardImage.src=s,this._cardImage.alt=t,this._cardTitle.textContent=t,super.open()}}({popupSelector:"#card-preview-modal"}),p=new n("#add-card-modal",(e=>{const t=f({name:e.title,link:e.url});h.addItem(t),d.reset(),v.disableButton()})),h=new class{constructor(e,t){let{items:s,renderer:n}=e;this.items=s,this.renderer=n,this.container=document.querySelector(t)}renderItems(){this.items.forEach((e=>{this.renderer(e)}))}addItem(e){this.container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{h.addItem(f(e))}},".cards__list"),E=new class{constructor(e){let{nameSelector:t,descriptionSelector:s}=e;this._nameInfo=document.querySelector(t),this._descriptionInfo=document.querySelector(s)}getUserInfo(){return{name:this._nameInfo.textContent,description:this._descriptionInfo.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._nameInfo.textContent=t,this._descriptionInfo.textContent=s}}({nameSelector:".profile__title",descriptionSelector:".profile__description"}),S=new t(_,c),v=new t(_,d);function f(t){return new e(t,"#card-template",y).getView()}m.setEventListeners();const g=new n("#edit-modal",(function(e){let{name:t,description:s}=e;E.setUserInfo({name:t,description:s})}));function y(e){m.open(e)}g.setEventListeners(),p.setEventListeners(),h.renderItems(),i.addEventListener("click",(()=>{const e=E.getUserInfo();a.value=e.name,l.value=e.description,g.open()})),u.addEventListener("click",(()=>{p.open()})),S.enableValidation(),v.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUksWUFBRStILEdBQWFsSSxFQUNwRDRILEVBQVNPLFlBQVksQ0FBRWhJLE9BQU0rSCxlQUMvQixJQVJBLFNBQVNJLEVBQWtCRCxHQUN6QjFCLEVBQWtCakMsS0FBSzJELEVBQ3pCLENBUkFFLEVBQWlCekQsb0JBRWpCZ0MsRUFBYWhDLG9CQUVicUMsRUFBU00sY0FjVHJCLEVBQWtCdkYsaUJBQWlCLFNBQVMsS0FDMUMsTUFBTTJILEVBQVdaLEVBQVNLLGNBQzFCM0IsRUFBa0JtQyxNQUFRRCxFQUFTckksS0FDbkNvRyxFQUF3QmtDLE1BQVFELEVBQVNOLFlBQ3pDSyxFQUFpQjdELE1BQU0sSUFHekJnQyxFQUFpQjdGLGlCQUFpQixTQUFTLEtBQ3pDaUcsRUFBYXBDLE1BQU0sSUFHckIwRCxFQUFrQmpFLG1CQUNsQmtELEVBQWlCbEQsa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgbGluayB9LCBjYXJkU2VsZWN0b3IsIGhhbmRsZVByZXZpZXdQaWN0dXJlKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlUHJldmlld1BpY3R1cmUgPSBoYW5kbGVQcmV2aWV3UGljdHVyZTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8vXCIuY2FyZF9fbGlrZS1idXR0b25cIlxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUljb24oKTtcclxuICAgICAgfSk7XHJcbiAgICAvLyBcIi5jYXJkX19kZWxldGUtYnV0dG9uXCJcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZCgpO1xyXG4gICAgICB9KTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgdGhpcy5faGFuZGxlUHJldmlld1BpY3R1cmUoeyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZURlbGV0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VJY29uKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3KCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgLy8gZ2V0IHRoZSBjYXJkIHZpZXdcclxuICAgIC8vIHNldCBldmVudCBsaXN0ZW5lcnNcclxuICAgIC8vIGdldCBlbGVtZW50cyBpbnNpZGUgY2FyZFxyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXJkTmFtZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGV4dFwiKTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fY2FyZE5hbWUudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAvLyByZXR1cm4gdGhlIGNhcmRcclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbCkge1xyXG4gICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1FbDtcclxuICAgIHRoaXMuX2Zvcm0gPSBzZXR0aW5ncy5mb3JtU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5lcnJvckNsYXNzO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gaW5wdXRFbC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgIGVycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWwgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICB9XHJcblxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IGZvdW5kSW52YWxpZCA9IGZhbHNlO1xyXG5cclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQodGhpcy5faW5wdXRFbHMpKSB7XHJcbiAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgLy8gICByZXR1cm4gIWlucHV0TGlzdC5ldmVyeSgoaW5wdXRFbCkgPT4gaW5wdXRFbC52YWxpZGl0eS52YWxpZCk7XHJcbiAgLy8gfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RWxzLnNvbWUoKGlucHV0RWwpID0+IHtcclxuICAgICAgcmV0dXJuICFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpIHtcclxuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gWy4uLnRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgLy9yZW1vdmUgYWxsIGVycm9yIG1lc3NhZ2VzXHJcbiAgICAvLyByZW1vdmUgYWxsIGVycm9yIGNsYXNzZXNcclxuICAgIC8vIHNldCBzdWJtaXQgYnV0dG9uIHRvIGRpc2FibGVkIHVzaW5nIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlXHJcbiAgfVxyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gY29uc3Qgc2V0dGluZ3MgPSB7XHJcbi8vICAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4vLyAgIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4vLyAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uLXNhdmVcIixcclxuLy8gICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b24tc2F2ZV9kaXNhYmxlZFwiLFxyXG4vLyAgIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4vLyAgIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxuLy8gfTtcclxuXHJcbi8vIGNvbnN0IGVkaXRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2V0dGluZ3MsIGVkaXRGb3JtKTtcclxuLy8gY29uc3QgYWRkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBhZGRGb3JtKTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgLy9hZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGRvY3VtZW50IGtleXVwIG9yIGtleSBkb3duXHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgLy8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVyXHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZSkgPT4ge1xyXG4gICAgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8vIHNldCB1cCBhIGNsb3NlIGxpc3RlbmVyXHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0KTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsXCIpIHx8XHJcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlXCIpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtb2RhbF9fYnV0dG9uLXNhdmVcIik7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBbLi4udGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJtb2RhbF9faW5wdXRcIildO1xyXG4gICAgLy8gdGhpcy5fZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICB9XHJcblxyXG4gIC8vIGNsb3NlKCkge1xyXG4gIC8vICAgc3VwZXIuY2xvc2UoKTtcclxuICAvLyB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcyhlbGVtZW50KSB7XHJcbiAgICBjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKGVsZW1lbnQpO1xyXG4gICAgY29uc3QgZGF0YU9iamVjdCA9IE9iamVjdC5mcm9tRW50cmllcyhkYXRhLmVudHJpZXMoKSk7XHJcblxyXG4gICAgdGhpcy5fZm9ybVZhbHVlcyA9IGRhdGFPYmplY3Q7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1WYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoZS50YXJnZXQpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGRhdGEpO1xyXG4gICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlZGl0LW1vZGFsXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLW1vZGFsXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX190aXRsZVwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBwcm9maWxlRWRpdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcHJvZmlsZS10aXRsZS1pbnB1dFwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRGVzY3JpcHRpb25JbnB1dCA9IHByb2ZpbGVFZGl0TW9kYWwucXVlcnlTZWxlY3RvcihcclxuICBcIiNwcm9maWxlLWRlc2NyaXB0aW9uLWlucHV0XCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IHByb2ZpbGVFZGl0TW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRGb3JtRWxlbWVudCA9IGFkZENhcmRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG5leHBvcnQgY29uc3QgYWRkTmV3Q2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXR0aW5ncyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b24tc2F2ZVwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbi1zYXZlX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IHtcclxuICBpbml0aWFsQ2FyZHMsXHJcbiAgcHJvZmlsZUVkaXRNb2RhbCxcclxuICBwcm9maWxlRWRpdEJ1dHRvbixcclxuICBhZGRDYXJkTW9kYWwsXHJcbiAgcHJvZmlsZVRpdGxlLFxyXG4gIHByb2ZpbGVEZXNjcmlwdGlvbixcclxuICBwcm9maWxlVGl0bGVJbnB1dCxcclxuICBwcm9maWxlRGVzY3JpcHRpb25JbnB1dCxcclxuICBwcm9maWxlRWRpdEZvcm0sXHJcbiAgYWRkQ2FyZEZvcm1FbGVtZW50LFxyXG4gIGFkZE5ld0NhcmRCdXR0b24sXHJcbiAgc2V0dGluZ3MsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuY29uc3QgcHJldmlld0ltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2Uoe1xyXG4gIHBvcHVwU2VsZWN0b3I6IFwiI2NhcmQtcHJldmlldy1tb2RhbFwiLFxyXG59KTtcclxuY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjYWRkLWNhcmQtbW9kYWxcIiwgKGRhdGEpID0+IHtcclxuICBjb25zdCBjYXJkRGF0YSA9IHtcclxuICAgIG5hbWU6IGRhdGEudGl0bGUsXHJcbiAgICBsaW5rOiBkYXRhLnVybCxcclxuICB9O1xyXG4gIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkKGNhcmREYXRhKTtcclxuICBjYXJkTGlzdC5hZGRJdGVtKG5ld0NhcmQpO1xyXG4gIGFkZENhcmRGb3JtRWxlbWVudC5yZXNldCgpO1xyXG4gIGFkZEZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvbigpO1xyXG59KTtcclxuXHJcbmNvbnN0IGNhcmRMaXN0ID0gbmV3IFNlY3Rpb24oXHJcbiAge1xyXG4gICAgaXRlbXM6IGluaXRpYWxDYXJkcyxcclxuICAgIHJlbmRlcmVyOiAoZGF0YSkgPT4ge1xyXG4gICAgICBjYXJkTGlzdC5hZGRJdGVtKGNyZWF0ZUNhcmQoZGF0YSkpO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIFwiLmNhcmRzX19saXN0XCJcclxuKTtcclxuXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXHJcbiAgZGVzY3JpcHRpb25TZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcclxufSk7XHJcblxyXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBwcm9maWxlRWRpdEZvcm0pO1xyXG5jb25zdCBhZGRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2V0dGluZ3MsIGFkZENhcmRGb3JtRWxlbWVudCk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGNhcmREYXRhKSB7XHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBuZXcgQ2FyZChjYXJkRGF0YSwgXCIjY2FyZC10ZW1wbGF0ZVwiLCBoYW5kbGVDYXJkUHJldmlldyk7XHJcbiAgcmV0dXJuIGNhcmRFbGVtZW50LmdldFZpZXcoKTtcclxufVxyXG5cclxucHJldmlld0ltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IGVkaXRQcm9maWxlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNlZGl0LW1vZGFsXCIsXHJcbiAgaGFuZGxlUHJvZmlsZUVkaXRTdWJtaXRcclxuKTtcclxuZWRpdFByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYWRkQ2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jYXJkTGlzdC5yZW5kZXJJdGVtcygpO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2FyZFByZXZpZXcoY2FyZERhdGEpIHtcclxuICBwcmV2aWV3SW1hZ2VQb3B1cC5vcGVuKGNhcmREYXRhKTtcclxufVxyXG5cclxuLy8gRXZlbnQgSGFuZGxlcnNcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVFZGl0U3VibWl0KHsgbmFtZSwgZGVzY3JpcHRpb24gfSkge1xyXG4gIHVzZXJJbmZvLnNldFVzZXJJbmZvKHsgbmFtZSwgZGVzY3JpcHRpb24gfSk7XHJcbn1cclxuXHJcbi8vIEV2ZW50IExpc3RlbmVyc1xyXG5cclxucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgcHJvZmlsZVRpdGxlSW5wdXQudmFsdWUgPSB1c2VyRGF0YS5uYW1lO1xyXG4gIHByb2ZpbGVEZXNjcmlwdGlvbklucHV0LnZhbHVlID0gdXNlckRhdGEuZGVzY3JpcHRpb247XHJcbiAgZWRpdFByb2ZpbGVQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuYWRkTmV3Q2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZENhcmRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hZGRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmV4cG9ydCB7IFBvcHVwV2l0aEltYWdlIH07XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yIH0pIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19wcmV2aWV3LWltYWdlXCIpO1xyXG4gICAgdGhpcy5fY2FyZFRpdGxlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19wcmV2aWV3LWRlc2NyaXB0aW9uXCJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvcGVuKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICAvLyBzZXQgdGhlIHNyYywgdGV4dENvbnRlbnQgYW5kIGFsdFxyXG4gICAgLy8gdGhpcy5fdGl0bGUgPSB0aGlzLl9jYXJkSW1hZ2UubmFtZTtcclxuICAgIC8vIHRoaXMuX2xpbmsgPSB0aGlzLl9jYXJkSW1hZ2UubGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IG5hbWU7XHJcbiAgICB0aGlzLl9jYXJkVGl0bGUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjYXJkU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYXJkU2VsZWN0b3IpO1xyXG4gICAgLy8gcGFzcyBjb250YWluZXIgc2VsZWN0b3IgYXMgYXJndW1lbnRcclxuICAgIC8vIHNlbGVjdCBjb250YWluZXJcclxuICB9XHJcblxyXG4gIC8vIHNldENvbnRhaW5lcihjb250YWluZXIpIHtcclxuICAvLyAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gY2FsbCBvbiBwYWdlIGxvYWRcclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyKGl0ZW0pO1xyXG4gICAgICAvLyBjb25zdCBlbGVtZW50ID0gdGhpcy5yZW5kZXJlcihpdGVtKTtcclxuICAgICAgLy8gdGhpcy5jb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBjYWxsIHdoZW4gY3JlYXRpbmcgYSBuZXcgY2FyZFxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBkZXNjcmlwdGlvblNlbGVjdG9yIH0pIHtcclxuICAgIC8vIHRoaXMuX3Byb2ZpbGVJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VySW5mbyk7XHJcbiAgICB0aGlzLl9uYW1lSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Rlc2NyaXB0aW9uSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGVzY3JpcHRpb25TZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICAvLyB1c2Ugd2hlbiBvcGVuaW5nIHByb2ZpbGUgZWRpdCBtb2RhbFxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgLy8gY29uc3QgdXNlckluZm8gPSB7fTtcclxuICAgIC8vIHVzZXJJbmZvLm5hbWUgPSB0aGlzLl9uYW1lSW5mby50ZXh0Q29udGVudDtcclxuICAgIC8vIHVzZXJJbmZvLmRlc2NyaXB0aW9uID0gdGhpcy5fZGVzY3JpcHRpb25JbmZvLnRleHRDb250ZW50O1xyXG4gICAgLy8gcmV0dXJuIHVzZXJJbmZvO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUluZm8udGV4dENvbnRlbnQsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9kZXNjcmlwdGlvbkluZm8udGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gdXNlIHdoZW4gc3VibWl0dGluZyB0aGUgc3VibWl0dGluZyBlZGl0IG1vZGFsXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBkZXNjcmlwdGlvbiB9KSB7XHJcbiAgICB0aGlzLl9uYW1lSW5mby50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkluZm8udGV4dENvbnRlbnQgPSBkZXNjcmlwdGlvbjtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsIl9yZWYiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVQcmV2aWV3UGljdHVyZSIsIm5hbWUiLCJsaW5rIiwidGhpcyIsIl9uYW1lIiwiX2xpbmsiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZVByZXZpZXdQaWN0dXJlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2NhcmRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlTGlrZUljb24iLCJfaGFuZGxlRGVsZXRlQ2FyZCIsIl9jYXJkSW1hZ2UiLCJyZW1vdmUiLCJfZ2V0VGVtcGxhdGUiLCJkb2N1bWVudCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJnZXRWaWV3IiwiX2NhcmROYW1lIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJmb3JtRWwiLCJfc2V0dGluZ3MiLCJfZm9ybUVsIiwiX2Zvcm0iLCJmb3JtU2VsZWN0b3IiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsIiwiZXJyb3JNZXNzYWdlRWwiLCJpZCIsImFkZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX2hhc0ludmFsaWRJbnB1dCIsIl9pbnB1dEVscyIsImRpc2FibGVCdXR0b24iLCJfc3VibWl0QnV0dG9uIiwiZGlzYWJsZWQiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImUiLCJyZXNldFZhbGlkYXRpb24iLCJlbmFibGVWYWxpZGF0aW9uIiwicHJldmVudERlZmF1bHQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsIm9wZW4iLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsImNvbnNvbGUiLCJsb2ciLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfcG9wdXBGb3JtIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfaW5wdXRMaXN0IiwiX2dldElucHV0VmFsdWVzIiwiZWxlbWVudCIsImRhdGEiLCJGb3JtRGF0YSIsImRhdGFPYmplY3QiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJfZm9ybVZhbHVlcyIsInJlc2V0IiwicHJvZmlsZUVkaXRNb2RhbCIsInByb2ZpbGVFZGl0QnV0dG9uIiwiYWRkQ2FyZE1vZGFsIiwicHJvZmlsZVRpdGxlSW5wdXQiLCJwcm9maWxlRGVzY3JpcHRpb25JbnB1dCIsInByb2ZpbGVFZGl0Rm9ybSIsImFkZENhcmRGb3JtRWxlbWVudCIsImFkZE5ld0NhcmRCdXR0b24iLCJwcmV2aWV3SW1hZ2VQb3B1cCIsIl9jYXJkVGl0bGUiLCJfcmVmMiIsImFkZENhcmRQb3B1cCIsIm5ld0NhcmQiLCJjcmVhdGVDYXJkIiwidGl0bGUiLCJ1cmwiLCJjYXJkTGlzdCIsImFkZEl0ZW0iLCJhZGRGb3JtVmFsaWRhdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsImNvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsInByZXBlbmQiLCJ1c2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImRlc2NyaXB0aW9uU2VsZWN0b3IiLCJfbmFtZUluZm8iLCJfZGVzY3JpcHRpb25JbmZvIiwiZ2V0VXNlckluZm8iLCJkZXNjcmlwdGlvbiIsInNldFVzZXJJbmZvIiwiZWRpdEZvcm1WYWxpZGF0b3IiLCJjYXJkRGF0YSIsImhhbmRsZUNhcmRQcmV2aWV3IiwiZWRpdFByb2ZpbGVQb3B1cCIsInVzZXJEYXRhIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9